#! /usr/local/bin/bash
########################
##### B121556 kypkk ####
########################
command=""
function help_msg() {
cat << EOF
Usage:
- create: zfsbak DATASET [ROTATION_CNT]
- list: zfsbak -l|--list [DATASET|ID|DATASET ID...]
- delete: zfsbak -d|--delete [DATASET|ID|DATASET ID...]
- export: zfsbak -e|--export DATASET [ID]
- import: zfsbak -i|--import FILENAME DATASET
EOF
}

function timeStamp() {
  date '+%Y-%m-%d-%H:%M:%S'
}


function zfsbak_create() {
  command="create"
  dataset="$1"
  rotation=${2:-12}
  snap="$1"@"zfsbak_"$(timeStamp)


  # Create a new snapshot
  zfs snapshot -r "$snap" && echo "Snap $snap"	

  # Get a list of existing snapshots, sorted by creation time
  local snapshots=($(zfsbak_list "$dataset"))

  snapshots=(${snapshots[@]:3})
  # Check if the number of snapshots exceeds the rotation count
  while [ ${#snapshots[@]} -gt $rotation ]; do
    # Delete the oldest snapshot
    zfs destroy -r "${snapshots[0]}"
    echo "Destroy ${snapshots[0]}"
    snapshots=(${snapshots[@]:1})
  done
 }

function snapshot_list() {
  echo "$1"
  zfs list -rt snapshot -o name -s creation "$1" | sed 1d
}

function zfsbak_list() {

  local dataset="${1-mypool}"
  local id=""
  local count=0

  # Check if the first argument is an ID (numeric)
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    id="$dataset"
    dataset="mypool"
  fi

  # If two arguments are provided, the second is the ID
  if [ $# -eq 2 ]; then
    id="$2"
  fi

  # Print the Table Title
  printf "ID\tDATASET\t\tTIME\n"
  previous_item_creation_time=""
  previous_item_dataset=""
  # Call snapshot_list and process its output
  zfs list -rt snapshot -o name -s creation "$dataset" | sed 1d | while read -r line; do
    snapshot_name=$(echo "$line" | awk '{print $1}')
    snapshot_dataset=${snapshot_name%%@*}
    snapshot_id=${snapshot_name##*@}
    creation_time=${snapshot_id##*_}
    part1=$(echo "$snapshot_dataset" | cut -d'/' -f1,2)
    part2=$(echo "$previous_item_dataset" | cut -d'/' -f1,2)

    if [[ "$command" == "delete" ]]; then
      count=$((count + 1))
      if [[ "$count" == *"$id"* ]]; then
        echo $snapshot_name
      fi
    else

      # Filter snapshots that don't have the prefix "zfsbak_"
      if [[ "$snapshot_id" == zfsbak_* ]]; then
        if [[ "$creation_time" == "$previous_item_creation_time" && ! "$part1" == "$part2" ]] || [[ ! "$creation_time" == "$previous_item_creation_time" ]];then
          count=$((count + 1))
          # Apply filters for ID and DATASET
          if { [ -z "$command" ] && ([ -z "$id" ] || [[ "$count" == *"$id"* ]]); }; then
           printf "$count\t$snapshot_dataset\t$creation_time\n"
          elif [[ "$count" == *"$id"* ]]; then
            echo $snapshot_name  
          fi
        fi
      fi
      previous_item_creation_time="$creation_time"
      previous_item_dataset="$snapshot_dataset"
    fi
  done
}

function zfsbak_delete() {

  command="delete"
  local snapshots=($(zfsbak_list $@))
  
  snapshots=(${snapshots[@]:3})
  for snaps in ${snapshots[@]}; do 
    zfs destroy  "$snaps" && echo "Destroy $snaps"
  done
}


function zfsbak_export() {
  
  command="export"

  # Find the snapshot name using zfsbak_list
  local snapshot_name=$(zfsbak_list "$@"| sed 1d)

  if [ ! -z "$snapshot_name" ]; then 
    # Define the export file path
    local export_file=~/"$(echo "$snapshot_name" | sed "s/\//_/g").zst.aes"
    
     # Send the snapshot to a zstd compressed file
    zfs send -R "$snapshot_name" | zstd > "${export_file%.aes}"

    # Encrypt the compressed file
    openssl enc -aes-256-cbc -pbkdf2 -in "${export_file%.aes}" -out "$export_file" -pass pass:"$ZFSBAK_PASS"
    
    echo "Export $snapshot_name to $export_file"

  fi


}

function zfsbak_import() {
  command="import"

  local filename="$1"
  local dataset="$2"
  
  filename="${filename/#\~//home/judge}"

  # Decompress and load the snapshot into the dataset
  zstd -rd < "$filename" | zfs receive "$dataset"



  echo "Import "$filename" to "$dataset""

}

function main(){
  case "$1" in
    -l|--list)   shift; zfsbak_list   "$@" ;;
    -d|--delete) shift; zfsbak_delete "$@" ;;
    -e|--export) shift; zfsbak_export "$@" ;;
    -i|--import) shift; zfsbak_import "$@" ;;
    *)
      if [ $# -eq 0 ]; then
        help_msg
      else
        zfsbak_create "$@"
      fi
      ;;
  esac
}

main "$@"
