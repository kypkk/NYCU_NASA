#! /usr/local/bin/python
import os
import pwd
import time
import sys

def daemonize(pidfile):
    # Perform first fork.
    try:
        pid = os.fork()
        if pid > 0:
            # Exit parent process
            sys.exit(0)
    except OSError as e:
        sys.stderr.write(f"Fork #1 failed: {e}\n")
        sys.exit(1)

    # Decouple from parent environment.
    os.chdir('/')
    os.setsid()
    os.umask(0)

    # Perform second fork.
    try:
        pid = os.fork()
        if pid > 0:
            # Exit from second parent.
            sys.exit(0)
    except OSError as e:
        sys.stderr.write(f"Fork #2 failed: {e}\n")
        sys.exit(1)

    # Write the PID file
    with open(pidfile, 'w') as f:
        f.write(str(os.getpid()))

    # Redirect standard file descriptors.
    sys.stdout.flush()
    sys.stderr.flush()
    with open('/dev/null', 'r') as f:
        os.dup2(f.fileno(), sys.stdin.fileno())
    with open('/dev/null', 'a+') as f:
        os.dup2(f.fileno(), sys.stdout.fileno())
    with open('/dev/null', 'a+') as f:
        os.dup2(f.fileno(), sys.stderr.fileno())

def run(public_dir):
    known_exe_files = set()
    while True:
        # Main code goes here.
        current_exe_files = {file for file in os.listdir(public_dir) if file.endswith(".exe")}
        new_exe_files = current_exe_files - known_exe_files
        if new_exe_files:
            with open("/var/log/sftp_watchd.log", "a") as log:
                for file in new_exe_files:
                    file_path = os.path.join(public_dir, file)
                    file_uploader = pwd.getpwuid(os.stat(file_path).st_uid).pw_name
                    log.write(f"{file_path} violate file detected. Uploaded by {file_uploader}.")

            # Update the known files set
            known_exe_files = current_exe_files

        # Sleep for a while before checking again
        time.sleep(10)


if __name__ == "__main__":
    pidfile = '/var/run/sftp_watchd.pid'
    public_dir = "/home/sftp/public"
    daemonize(pidfile)
    run(public_dir)
