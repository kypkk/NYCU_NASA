#! /usr/local/bin/python
import os
import pwd
import time
import sys
import shutil
import logging
from logging.handlers import RotatingFileHandler

def setup_logging():
    logger = logging.getLogger('sftp_watchd')
    logger.setLevel(logging.INFO)
    handler = RotatingFileHandler('/var/log/sftp_watchd.log', maxBytes=1000000, backupCount=5)
    formatter = logging.Formatter('%(asctime)s freebsd-132 %(name)s[%(process)d]: %(message)s', datefmt='%b %d %H:%M:%S')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return logger

def daemonize(pidfile):
    # Perform first fork.
    try:
        pid = os.fork()
        if pid > 0:
            # Exit parent process
            sys.exit(0)
    except OSError as e:
        sys.stderr.write(f"Fork #1 failed: {e}\n")
        sys.exit(1)

    # Decouple from parent environment.
    os.chdir('/')
    os.setsid()
    os.umask(0)

    # Perform second fork.
    try:
        pid = os.fork()
        if pid > 0:
            # Exit from second parent.
            sys.exit(0)
    except OSError as e:
        sys.stderr.write(f"Fork #2 failed: {e}\n")
        sys.exit(1)

    # Write the PID file
    with open(pidfile, 'w') as f:
        f.write(str(os.getpid()))

    # Redirect standard file descriptors.
    sys.stdout.flush()
    sys.stderr.flush()
    with open('/dev/null', 'r') as f:
        os.dup2(f.fileno(), sys.stdin.fileno())
    with open('/dev/null', 'a+') as f:
        os.dup2(f.fileno(), sys.stdout.fileno())
    with open('/dev/null', 'a+') as f:
        os.dup2(f.fileno(), sys.stderr.fileno())

def run(public_dir, hidden_dir, logger):
    known_exe_files = set()

    if not os.path.exists(hidden_dir):
        os.makedirs(hidden_dir, exist_ok=True)

    
    while True:
        # Main code goes here.
        try:
            current_exe_files = {file for file in os.listdir(public_dir) if file.endswith(".exe")}
            new_exe_files = current_exe_files - known_exe_files
            if new_exe_files:
                for file in new_exe_files:
                    file_path = os.path.join(public_dir, file)
                    hidden_file_path = os.path.join(hidden_dir, file)
                    try:
                        os.system(f"sudo mv ${file_path} ${hidden_file_path}")
                        file_uploader = pwd.getpwuid(os.stat(hidden_file_path).st_uid).pw_name
                        logger.info(f"{file_path} violate file detected. Uploaded by {file_uploader}.")
                    except Exception as e:
                        logger.error(f"Failed to move {file_path}: {e}")
                known_exe_files = current_exe_files
        except FileNotFoundError:
            logger.error(f"Directory {public_dir} does not exist.")
        except Exception as e:
            logger.error(f"Error while monitoring: {e}")
        time.sleep(1)
        

        


if __name__ == "__main__":
    pidfile = '/var/run/sftp_watchd.pid'
    public_dir = "/home/sftp/public"
    hidden_dir = "/home/sftp/hidden/.exe"
    logger = setup_logging()
    daemonize(pidfile)
    run(public_dir, hidden_dir, logger)
